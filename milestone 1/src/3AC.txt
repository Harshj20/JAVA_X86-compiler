test_16.main:
	push a
	*(ebp + 8) = 0
	push b
	push c
	t2 = (ebp + 8)
	t3 = *t2 > 1
	if t3 goto L-1
	t5 = (ebp + 8)
	t6 = *t5 +int 1
	t8 = t6
	goto L-2
L-1:
	t4 = (ebp + 16)
	t8 = *t4
L-2:
	t1 = (ebp + 12)
	*t1 = t8
	t0 = (ebp + 8)
	*t0 = *t1
ArrayDeclaration :
	t0 = 10 * 11
	t1 = t0 * 12
	t2 = t1 * 4 // size of int
	t3 = allocate t2
	*(ebp + 20) = t3
	t1 = (ebp + 20)
	t2 = *t1
	t3 = 4
	t3 = t3 * 11
	t3 = t3 * 12
	t3 = t3 * 4// offset vals for int
	t2 = t2 + t3
	t4 = t2
	t5 = 5
	t5 = t5 * 12
	t5 = t5 * 4// offset vals for int
	t4 = t4 + t5
	t13 = t4
	t6 = (ebp + 20)
	t7 = *t6
	t8 = 2
	t8 = t8 * 11
	t8 = t8 * 12
	t8 = t8 * 4// offset vals for int
	t7 = t7 + t8
	t9 = t7
	t10 = 2
	t10 = t10 * 12
	t10 = t10 * 4// offset vals for int
	t9 = t9 + t10
	t11 = t9
	t12 = 3
	t12 = t12 * 4// offset vals for int
	t11 = t11 + t12
	t14 = *t11
	t14 = t14 * 4// offset vals for int
	t13 = t13 + t14
	t0 = (ebp + 12)
	*t0 = *t13

