digraph PARSE_TREE {
  node0 [label="\nProgram"];
  node0 -> node1;
  node1 [label="\nNormalClassDeclaration"];
  node1 -> node2;
  node2 [label="Keyword\nclass"];
  node1 -> node3;
  node3 [label="Identifier\nAddition"];
  node1 -> node4;
  node4 [label="\nClassBody"];
  node4 -> node5;
  node5 [label="Separator\n{"];
  node4 -> node6;
  node6 [label="\nClassBodyDeclarations"];
  node6 -> node7;
  node7 [label="\nFieldDeclaration"];
  node7 -> node8;
  node8 [label="Keyword\nint"];
  node7 -> node9;
  node9 [label="\nVariableDeclarator"];
  node9 -> node10;
  node10 [label="\nVariableDeclaratorId"];
  node10 -> node11;
  node11 [label="\nVariableDeclaratorId"];
  node11 -> node12;
  node12 [label="Identifier\na"];
  node11 -> node13;
  node13 [label="Separator\n["];
  node11 -> node14;
  node14 [label="Separator\n]"];
  node10 -> node15;
  node15 [label="Separator\n["];
  node10 -> node16;
  node16 [label="Separator\n]"];
  node9 -> node17;
  node17 [label="Operator\n="];
  node9 -> node18;
  node18 [label="\nArrayCreationExpression"];
  node18 -> node19;
  node19 [label="Keyword\nnew"];
  node18 -> node20;
  node20 [label="Keyword\nint"];
  node18 -> node21;
  node21 [label="\nDimExprs"];
  node21 -> node22;
  node22 [label="\nDimExpr"];
  node22 -> node23;
  node23 [label="Separator\n["];
  node22 -> node24;
  node24 [label="Literal\n10"];
  node22 -> node25;
  node25 [label="Separator\n]"];
  node21 -> node26;
  node26 [label="\nDimExpr"];
  node26 -> node27;
  node27 [label="Separator\n["];
  node26 -> node28;
  node28 [label="Literal\n10"];
  node26 -> node29;
  node29 [label="Separator\n]"];
  node7 -> node30;
  node30 [label="Separator\n;"];
  node6 -> node31;
  node31 [label="\nMethodDeclaration"];
  node31 -> node32;
  node32 [label="\nMethodHeader"];
  node32 -> node33;
  node33 [label="\nModifiers"];
  node33 -> node34;
  node34 [label="Keyword\npublic"];
  node33 -> node35;
  node35 [label="Keyword\nstatic"];
  node32 -> node36;
  node36 [label="Keyword\nint"];
  node32 -> node37;
  node37 [label="\nMethodDeclarator"];
  node37 -> node38;
  node38 [label="Identifier\naddTwoInt"];
  node37 -> node39;
  node39 [label="Separator\n("];
  node37 -> node40;
  node40 [label="\nFormalParameterList"];
  node40 -> node41;
  node41 [label="\nFormalParameter"];
  node41 -> node42;
  node42 [label="Keyword\nint"];
  node41 -> node43;
  node43 [label="Identifier\na"];
  node40 -> node44;
  node44 [label="Separator\n,"];
  node40 -> node45;
  node45 [label="\nFormalParameter"];
  node45 -> node46;
  node46 [label="Keyword\nint"];
  node45 -> node47;
  node47 [label="Identifier\nb"];
  node37 -> node48;
  node48 [label="Separator\n)"];
  node31 -> node49;
  node49 [label="\nBlock"];
  node49 -> node50;
  node50 [label="Separator\n{"];
  node49 -> node51;
  node51 [label="\nBlockStatements"];
  node51 -> node52;
  node52 [label="\nLocalVariableDeclarationStatement"];
  node52 -> node53;
  node53 [label="\nLocalVariableDeclaration"];
  node53 -> node54;
  node54 [label="Keyword\nint"];
  node53 -> node55;
  node55 [label="\nVariableDeclarator"];
  node55 -> node56;
  node56 [label="\nVariableDeclaratorId"];
  node56 -> node57;
  node57 [label="Identifier\nsum"];
  node56 -> node58;
  node58 [label="Separator\n["];
  node56 -> node59;
  node59 [label="Separator\n]"];
  node55 -> node60;
  node60 [label="Operator\n="];
  node55 -> node61;
  node61 [label="\nArrayAccess"];
  node61 -> node62;
  node62 [label="\nFieldAccess"];
  node62 -> node63;
  node63 [label="Keyword\nthis"];
  node62 -> node64;
  node64 [label="Separator\n."];
  node62 -> node65;
  node65 [label="Identifier\na"];
  node61 -> node66;
  node66 [label="Separator\n["];
  node61 -> node67;
  node67 [label="Literal\n9"];
  node61 -> node68;
  node68 [label="Separator\n]"];
  node52 -> node69;
  node69 [label="Separator\n;"];
  node51 -> node70;
  node70 [label="\nReturnStatement"];
  node70 -> node71;
  node71 [label="Keyword\nreturn"];
  node70 -> node72;
  node72 [label="Identifier\na"];
  node70 -> node73;
  node73 [label="Separator\n;"];
  node49 -> node74;
  node74 [label="Separator\n}"];
  node4 -> node75;
  node75 [label="Separator\n}"];
  node0 -> node76;
  node76 [label="EOF\nEOF"];
}
