Bicycle.ctor.2:
	push	%rbp
	%rbp = %rsp
	#MakingFunctionCall
	push [%rbp+16]
	call Bicycle.ctor
	%rsp = %rsp + 8
	[%rbp+16] = %rax
	t0 = [%rbp+16]
	t0 = t0 + 0
	(t0) = [%rbp+24]
	t0 = [%rbp+16]
	t0 = t0 + 8
	(t0) = [%rbp+32]
	%rax = [%rbp+16]
	%rsp = %rbp
	popq	%rbp
	ret

Bicycle.applyBrake:
	push	%rbp
	%rbp = %rsp
	t0 = [%rbp+16]
	t0 = t0 + 8
	t1 = (t0) - [%rbp+24]
	(t0) = t1
	%rsp = %rbp
	popq	%rbp
	ret

Bicycle.speedUp:
	push	%rbp
	%rbp = %rsp
	t0 = [%rbp+16]
	t0 = t0 + 8
	t1 = (t0) + [%rbp+24]
	(t0) = t1
	%rsp = %rbp
	popq	%rbp
	ret

Bicycle.ctor:
	push	%rbp
	%rbp = %rsp
	%rax = [%rbp+16]
	%rsp = %rbp
	popq	%rbp
	ret
MountainBike.ctor.3:
	push	%rbp
	%rbp = %rsp
	#MakingFunctionCall
	push [%rbp+16]
	call MountainBike.ctor
	%rsp = %rsp + 8
	[%rbp+16] = %rax
	t0 = [%rbp+16]
	t0 = t0 + 16
	(t0) = [%rbp+40]
	%rax = [%rbp+16]
	%rsp = %rbp
	popq	%rbp
	ret

MountainBike.setHeight:
	push	%rbp
	%rbp = %rsp
	t0 = [%rbp+16]
	t0 = t0 + 16
	(t0) = [%rbp+24]
	%rsp = %rbp
	popq	%rbp
	ret

MountainBike.ctor:
	push	%rbp
	%rbp = %rsp
	%rax = [%rbp+16]
	%rsp = %rbp
	popq	%rbp
	ret
main:
	push %rbp
	%rbp = %rsp
	t0 = 0
	t1 = allocate t0
#MakingFunctionCall
	push t1
	call main.2
	%rsp = %rsp + 8
	%rsp = %rbp
	pop %rbp
	ret

main.2:
	push	%rbp
	%rbp = %rsp
	push 0
	t2 = 24
	t3 = allocate t2
#MakingFunctionCall
	push 25
	push 100
	push 3
	push t3
	call MountainBike.ctor.3
	%rsp = %rsp + 32
	t3 = %rax
	[%rbp-8] = t3
	push 0
	t0 = [%rbp-8]
	t0 = t0 + 16
	[%rbp-16] = (t0)
#MakingFunctionCall
	push [%rbp-16]
	push 0
	call System.println
	%rsp = %rsp + 16
	%rsp = %rbp
	popq	%rbp
	ret

test_8.ctor:
	push	%rbp
	%rbp = %rsp
	%rax = [%rbp+16]
	%rsp = %rbp
	popq	%rbp
	ret
